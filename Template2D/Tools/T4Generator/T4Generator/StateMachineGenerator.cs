// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4Generator
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class StateMachineGenerator : StateMachineGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("/* --------------------------\r\n *\r\n * ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(@".cs
 *
 * Description: This is a auto-generated state machine.
 *
 * -------------------------- */

#region Includes
#region System Includes
using System.Collections;
using System.Collections.Generic;
#endregion

#region Other Includes
using Starvoxel.Core;
#endregion
#endregion

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_Namespace));
            this.Write("\r\n{\r\n\tpublic sealed partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(" \r\n\t{\r\n\t\t#region Classes\r\n\t\tpublic abstract class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(@"State : BaseState 
		{
			#region Structs
            /// <summary>
            /// Data used to determine if a transition is valid and what state it would transition to
            /// </summary>
			public struct sTransitionData
			{
				public readonly eTransitionValidity TransitionValidity;
				public readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(".eStates StateID;\r\n\r\n\t\t\t\tpublic sTransitionData(eTransitionValidity transitionVal" +
                    "idity, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(".eStates stateID)\r\n\t\t\t\t{\r\n\t\t\t\t\tTransitionValidity = transitionValidity;\r\n\t\t\t\t\tSta" +
                    "teID = stateID;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t#endregion\r\n\r\n\t\t\t#region Fields & Properties\r\n\t" +
                    "\t\tprotected readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(" m_Context = null; // Link to the context that owns tis instance.\r\n\t\t\tprotected r" +
                    "eadonly Dictionary<");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(@".eTransitions, sTransitionData> m_Transitions = null; // Map of all the transitions and to which states those transitions lead to
			
            /// <summary>
            /// State enum associated with this class.
            /// </summary>
			public abstract ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(".eStates StateID\r\n\t\t\t{\r\n\t\t\t\tget;\r\n\t\t\t}\r\n\t\t\t#endregion\r\n\r\n\t\t\t#region Constructors\r" +
                    "\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write("State(");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(@" context)
			{
				m_Context = context;
			}
			#endregion

			#region Public Methods
            /// <summary>
            /// Checks if the provided transition type is a valid transition for this state.
            /// </summary>
            /// <param name=""transitionType"">Transition type</param>
            /// <returns></returns>
			public bool IsValidTransition(");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(@".eTransitions transitionType)
			{
				 return m_Transitions != null && m_Transitions.ContainsKey(transitionType) && m_Transitions[transitionType].TransitionValidity == eTransitionValidity.Valid;
			}
			#endregion
		}

		#region ---------- PLACEHOLDER STATES ----------
");

		// Completely placeholder.  We are just putting these here so that we can test stuff.  Eventually this will all be off and built in it's own T4
		for(int stateIndex = 0; stateIndex < m_StateNames.Length; ++stateIndex)
        {
			string stateName = m_StateNames[stateIndex].Replace(" ", "") + "State";

			if (stateIndex > 0)
            {

            this.Write("\t\t\r\n");

            }

            this.Write("\t\tpublic class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateName));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write("State\r\n\t\t{\r\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(".eStates StateID\r\n\t\t\t{\r\n\t\t\t\tget { return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(".eStates.");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_StateNames[stateIndex].Replace(" ", "_").ToUpper()));
            this.Write("; }\r\n\t\t\t}\r\n\r\n\t\t\tpublic bool IsValidTransition(");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(".eTransitions transitionType)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(" context) : base(context) { }\r\n\t\t}\r\n");

        }

            this.Write("\t\t#endregion\r\n\t\t#endregion\r\n\r\n\t\t#region Enums\r\n\t\t/// <summary>\r\n        /// All s" +
                    "tates.  Also used as the index in the state array\r\n        /// </summary>\r\n\t\tpub" +
                    "lic enum eStates\r\n\t\t{\r\n");
 
			// Iterate over all the states and create the enum
			for(int stateIndex = 0; stateIndex < m_StateNames.Length; ++stateIndex)
            {

            this.Write("\t\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_StateNames[stateIndex].Replace(" ", "_").ToUpper()));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateIndex.ToString()));
            this.Write(",\r\n");

            }

            this.Write("\t\t}\r\n\t\t\r\n        /// <summary>\r\n        /// All possible transition types\r\n      " +
                    "  /// </summary>\r\n\t\tpublic enum eTransitions\r\n\t\t{\r\n");
 
			// Iterate over all the transition types and create the enum
			for(int transitionIndex = 0; transitionIndex < m_TransitionTypes.Length; ++transitionIndex)
            {

            this.Write("\t\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_TransitionTypes[transitionIndex].Replace(" ", "_".ToUpper())));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(transitionIndex.ToString()));
            this.Write(",\r\n");

                }

            this.Write("\t\t}\r\n\t\t#endregion\r\n\r\n\t\t#region Fields & Properties\r\n\t\t//const\r\n\r\n\t\t//public\r\n\r\n\t\t" +
                    "//protected\r\n\t\tprotected ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write("State[] m_States; // Instances of all the states\r\n\t\tprotected int m_CurrentStateI" +
                    "ndex = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_StartingStateIndex));
            this.Write("; // Index of the currently active state\r\n\t\t//private\r\n\r\n\t\t//properties\r\n\t\tpublic" +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write("State CurrentState\r\n\t\t{\r\n\t\t\tget { return m_States[m_CurrentStateIndex]; }\r\n\t\t}\r\n\t" +
                    "\t#endregion\r\n\r\n\t\t#region Constructor Methods\r\n\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write("()\r\n\t\t{\r\n\t\t\tm_States = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write("State[");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_StateNames.Length.ToString()));
            this.Write("];\r\n\t\t\t\r\n\t\t\t// I know this looks hardcoded, but because this is a generated file " +
                    "this will be auto-updated when re-generated.\r\n");

		for(int stateIndex = 0; stateIndex < m_StateNames.Length; ++stateIndex)
        {
			string stateName = m_StateNames[stateIndex].Replace(" ", "") + "State";

            this.Write("\t\t\tm_States[");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateIndex.ToString()));
            this.Write("] = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateName));
            this.Write("(this);\r\n");

        }

            this.Write(@"		}
		#endregion

		#region Public Methods
        /// <summary>
        /// Called to process a transition and potentially transition to a new state
        /// </summary>
        /// <param name=""transitionType"">Transiton type to try and transition with</param>
		public void ProcessTransition(");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ClassName));
            this.Write(@".eTransitions transitionType)
		{
			if (CurrentState.IsValidTransition(transitionType))
			{
				//TODO jsmellie: Fetch the state enum associated with the transition type
			}
		}
		#endregion

		#region Protected Methods
		#endregion

		#region Private Methods
		#endregion
	}
}");
            return this.GenerationEnvironment.ToString();
        }

private string _m_NamespaceField;

/// <summary>
/// Access the m_Namespace parameter of the template.
/// </summary>
private string m_Namespace
{
    get
    {
        return this._m_NamespaceField;
    }
}

private string _m_ClassNameField;

/// <summary>
/// Access the m_ClassName parameter of the template.
/// </summary>
private string m_ClassName
{
    get
    {
        return this._m_ClassNameField;
    }
}

private string[] _m_StateNamesField;

/// <summary>
/// Access the m_StateNames parameter of the template.
/// </summary>
private string[] m_StateNames
{
    get
    {
        return this._m_StateNamesField;
    }
}

private int _m_StartingStateIndexField;

/// <summary>
/// Access the m_StartingStateIndex parameter of the template.
/// </summary>
private int m_StartingStateIndex
{
    get
    {
        return this._m_StartingStateIndexField;
    }
}

private string[] _m_TransitionTypesField;

/// <summary>
/// Access the m_TransitionTypes parameter of the template.
/// </summary>
private string[] m_TransitionTypes
{
    get
    {
        return this._m_TransitionTypesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool m_NamespaceValueAcquired = false;
if (this.Session.ContainsKey("m_Namespace"))
{
    this._m_NamespaceField = ((string)(this.Session["m_Namespace"]));
    m_NamespaceValueAcquired = true;
}
if ((m_NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_Namespace");
    if ((data != null))
    {
        this._m_NamespaceField = ((string)(data));
    }
}
bool m_ClassNameValueAcquired = false;
if (this.Session.ContainsKey("m_ClassName"))
{
    this._m_ClassNameField = ((string)(this.Session["m_ClassName"]));
    m_ClassNameValueAcquired = true;
}
if ((m_ClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_ClassName");
    if ((data != null))
    {
        this._m_ClassNameField = ((string)(data));
    }
}
bool m_StateNamesValueAcquired = false;
if (this.Session.ContainsKey("m_StateNames"))
{
    this._m_StateNamesField = ((string[])(this.Session["m_StateNames"]));
    m_StateNamesValueAcquired = true;
}
if ((m_StateNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_StateNames");
    if ((data != null))
    {
        this._m_StateNamesField = ((string[])(data));
    }
}
bool m_StartingStateIndexValueAcquired = false;
if (this.Session.ContainsKey("m_StartingStateIndex"))
{
    this._m_StartingStateIndexField = ((int)(this.Session["m_StartingStateIndex"]));
    m_StartingStateIndexValueAcquired = true;
}
if ((m_StartingStateIndexValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_StartingStateIndex");
    if ((data != null))
    {
        this._m_StartingStateIndexField = ((int)(data));
    }
}
bool m_TransitionTypesValueAcquired = false;
if (this.Session.ContainsKey("m_TransitionTypes"))
{
    this._m_TransitionTypesField = ((string[])(this.Session["m_TransitionTypes"]));
    m_TransitionTypesValueAcquired = true;
}
if ((m_TransitionTypesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_TransitionTypes");
    if ((data != null))
    {
        this._m_TransitionTypesField = ((string[])(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class StateMachineGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
