// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace starvoxel.Core
{
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class StateGenerator : StateGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {

	string stateName = m_StateName + "State";
	string baseStateName = m_ContextName + "State";
	string stateEnum = m_ContextName + ".eStates";
	string transitionEnum = m_ContextName + ".eTransitions";

            this.Write("/* --------------------------\r\n *\r\n * ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_StateName));
            this.Write(".cs\r\n *\r\n * Description: One of the states used in the ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ContextName));
            this.Write(@" state machine.
 * WARNING: THIS CLASS IS GENERATED.  CHANGES COULD BE LOST.
 *
 * -------------------------- */
#region Includes
#region System Includes
using System.Collections;
using System.Collections.Generic;
#endregion

#region Other Includes
using Starvoxel.Core;
#endregion
#endregion

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_Namespace));
            this.Write("\r\n{\r\n\tpublic partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ContextName));
            this.Write("\r\n\t{\r\n\t\tpublic sealed partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateName));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(baseStateName));
            this.Write("\r\n\t\t{\r\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateEnum));
            this.Write(" StateID\r\n\t\t\t{\r\n\t\t\t\tget { return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateEnum));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_StateName.Replace(" ", "_").ToUpper()));
            this.Write("; }\r\n\t\t\t}\r\n\r\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(m_ContextName));
            this.Write(" context) : base(context) { }\r\n\r\n\t\t\tprotected override void PopulateTransitionDic" +
                    "tionary()\r\n\t\t\t{\r\n\t\t\t\tm_Transitions = new Dictionary<");
            this.Write(this.ToStringHelper.ToStringWithCulture(transitionEnum));
            this.Write(", sTransitionData>();\r\n\r\n\t\t\t\tsTransitionData transitionData;\r\n\r\n\t\t\t\t// Valid Tran" +
                    "sitions\r\n");

			List<string> transitionTypes = new List<string>(m_TransitionTypes);

			for (int i = 0; i < m_ValidTransitionTypes.Length; ++i)
            {
				transitionTypes.Remove(m_ValidTransitionTypes[i]);

				string stateEnumName = m_ValidStateNames[i].Replace(" ", "_").ToUpper();
				string transitionEnumValue = m_ValidTransitionTypes[i].Replace(" ", "_").ToUpper();

				if (i > 0)
                {

            this.Write("\r\n");

                }

            this.Write("\t\t\t\ttransitionData = new sTransitionData(eTransitionValidity.Valid, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateEnum));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateEnumName));
            this.Write(");\r\n\t\t\t\tm_Transitions.Add(");
            this.Write(this.ToStringHelper.ToStringWithCulture(transitionEnum));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(transitionEnumValue));
            this.Write(", transitionData);\r\n");

            }

			if (transitionTypes.Count > 0)
            {

            this.Write("\r\n\t\t\t\t//Ignored Transitions\r\n");

				for(int i = 0; i < transitionTypes.Count; ++i)
                {
					string transitionEnumValue = transitionTypes[i].Replace(" ", "_").ToUpper();

					if (i > 0)
					{

            this.Write("\r\n");

					}

            this.Write("\t\t\t\ttransitionData = new sTransitionData(eTransitionValidity.Ignore, (");
            this.Write(this.ToStringHelper.ToStringWithCulture(stateEnum));
            this.Write(")0);\r\n\t\t\t\tm_Transitions.Add(");
            this.Write(this.ToStringHelper.ToStringWithCulture(transitionEnum));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(transitionEnumValue));
            this.Write(", transitionData);\r\n");

                }
            }

            this.Write("\t\t\t}\r\n\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }

private string _m_NamespaceField;

/// <summary>
/// Access the m_Namespace parameter of the template.
/// </summary>
private string m_Namespace
{
    get
    {
        return this._m_NamespaceField;
    }
}

private string _m_ContextNameField;

/// <summary>
/// Access the m_ContextName parameter of the template.
/// </summary>
private string m_ContextName
{
    get
    {
        return this._m_ContextNameField;
    }
}

private string _m_StateNameField;

/// <summary>
/// Access the m_StateName parameter of the template.
/// </summary>
private string m_StateName
{
    get
    {
        return this._m_StateNameField;
    }
}

private string[] _m_TransitionTypesField;

/// <summary>
/// Access the m_TransitionTypes parameter of the template.
/// </summary>
private string[] m_TransitionTypes
{
    get
    {
        return this._m_TransitionTypesField;
    }
}

private string[] _m_ValidTransitionTypesField;

/// <summary>
/// Access the m_ValidTransitionTypes parameter of the template.
/// </summary>
private string[] m_ValidTransitionTypes
{
    get
    {
        return this._m_ValidTransitionTypesField;
    }
}

private string[] _m_ValidStateNamesField;

/// <summary>
/// Access the m_ValidStateNames parameter of the template.
/// </summary>
private string[] m_ValidStateNames
{
    get
    {
        return this._m_ValidStateNamesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool m_NamespaceValueAcquired = false;
if (this.Session.ContainsKey("m_Namespace"))
{
    this._m_NamespaceField = ((string)(this.Session["m_Namespace"]));
    m_NamespaceValueAcquired = true;
}
if ((m_NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_Namespace");
    if ((data != null))
    {
        this._m_NamespaceField = ((string)(data));
    }
}
bool m_ContextNameValueAcquired = false;
if (this.Session.ContainsKey("m_ContextName"))
{
    this._m_ContextNameField = ((string)(this.Session["m_ContextName"]));
    m_ContextNameValueAcquired = true;
}
if ((m_ContextNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_ContextName");
    if ((data != null))
    {
        this._m_ContextNameField = ((string)(data));
    }
}
bool m_StateNameValueAcquired = false;
if (this.Session.ContainsKey("m_StateName"))
{
    this._m_StateNameField = ((string)(this.Session["m_StateName"]));
    m_StateNameValueAcquired = true;
}
if ((m_StateNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_StateName");
    if ((data != null))
    {
        this._m_StateNameField = ((string)(data));
    }
}
bool m_TransitionTypesValueAcquired = false;
if (this.Session.ContainsKey("m_TransitionTypes"))
{
    this._m_TransitionTypesField = ((string[])(this.Session["m_TransitionTypes"]));
    m_TransitionTypesValueAcquired = true;
}
if ((m_TransitionTypesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_TransitionTypes");
    if ((data != null))
    {
        this._m_TransitionTypesField = ((string[])(data));
    }
}
bool m_ValidTransitionTypesValueAcquired = false;
if (this.Session.ContainsKey("m_ValidTransitionTypes"))
{
    this._m_ValidTransitionTypesField = ((string[])(this.Session["m_ValidTransitionTypes"]));
    m_ValidTransitionTypesValueAcquired = true;
}
if ((m_ValidTransitionTypesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_ValidTransitionTypes");
    if ((data != null))
    {
        this._m_ValidTransitionTypesField = ((string[])(data));
    }
}
bool m_ValidStateNamesValueAcquired = false;
if (this.Session.ContainsKey("m_ValidStateNames"))
{
    this._m_ValidStateNamesField = ((string[])(this.Session["m_ValidStateNames"]));
    m_ValidStateNamesValueAcquired = true;
}
if ((m_ValidStateNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("m_ValidStateNames");
    if ((data != null))
    {
        this._m_ValidStateNamesField = ((string[])(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class StateGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
